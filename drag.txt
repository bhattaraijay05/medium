Dragable view with React Native Reanimated 2 and React Native Gesture Handler

React Native Gesture Handler and React Native Reanimated works on the UI Thread to provide 60 FPS animations to the React Native Application.

In this post we are going to see how to create a Dragable View which is reusable, by using React Native Reanimated and Gesture Handler.

We'll be using typescript, but feel free to use Javascript, if you are uncomfortable with Typescript, (Please learn TypescriptðŸ˜Š)

First Initialize the application using React Native Cli and Typescript template

//code
npx react-native init dragable --template react-native-template-typescript

Now we'll need to install the two libraries, Reanimated and Gesture Handler
//if using yarn
yarn add react-native-gesture-handler react-native-reanimated
//if using npm 
npm install --save react-native-gesture-handler react-native-reanimated

These two libraries have to work natively. Please follow the installation instructions from the official documentation.

Installation for React Native Gesture Handler
https://docs.swmansion.com/react-native-gesture-handler/docs/
Installation for React Native Reanimated 2
https://docs.swmansion.com/react-native-reanimated/docs/installation


Now Create a folder called app in the application and a folders inside app, and name it Elements(just for convention). 
Inside Elements create a file called SharedElements.tsx
(where we'll be creating reusable dragable component)



We'll be using Pan Gesture Handler from React Native Gesture Handler, to handle movements and Animated Api from React Native Reanimated

After Implementation the code will look like this 
//Code Here:



You might wonder what these functions do,
useAnimatedGestureHandler is High level API provided by React Native Reanimated, to provide 60 FPS, gesture handling experience. and onStart, onActive and onEnd are three helper functions. 
on onActive we are just telling to change the value of X and Y, and on end we'll be returning to the initial X, Y position


  const panGestureEvent = useAnimatedGestureHandler<
    PanGestureHandlerGestureEvent,
    ContextType
  >({
    onStart: (_, context) => {
      context.x = x.value;
      context.y = y.value;
    },
    onActive: (event, context) => {
      x.value = event.translationX + context.x;
      y.value = event.translationY + context.y;
    },
    onEnd: () => {
      x.value = withSpring(0);
      y.value = withSpring(0);
    },
  });


If you followed all the above steps you can now use the DragableView inside any other components.
Let's use it in App.tsx 
Just import the file add use it like regular component.

//App.tsx code here
































